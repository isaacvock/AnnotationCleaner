# Scoring file suitable for any species with intron sizes similar to mammals
# Edited from mikado provided scoring function to allow for identification of NMD targets
requirements: # Idea is to keep cutoffs in this section super lenient; can be more stringent in other sections
  expression: [((combined_cds_fraction.ncrna and exon_num.multi) or combined_cds_fraction.coding), and, ((exon_num.multi and  (cdna_length.multi, or,  combined_cds_length.multi) and max_intron_length, and, min_intron_length and proportion_verified_introns_inlocus and (is_complete or proportion_verified_introns)) or (exon_num.mono and ((combined_cds_length.mono or cdna_length.mono) and (selected_cds_fraction.mono and is_complete)))) ]
  parameters:
    combined_cds_fraction.ncrna: {operator: eq, value: 0} # Checks fraction of the transcript that is coding sequence; this defines the .ncRNA set
    combined_cds_fraction.coding: {operator: gt, value: 0.20} # Checks fraction of the transcript that is coding sequence; this defines that .coding set
    selected_cds_fraction.mono: {operator: gt, value: 0.40} # Checks fraction of the transcript that is CDS for mono-exonic mRNA
    cdna_length.mono: {operator: gt, value: 400} # Checks transcript length for mono-exonic transcript
    cdna_length.multi: {operator: ge, value: 300} # Checks transcript length for multi-exonic transcript
    combined_cds_length.mono: {operator: gt, value: 225} # Checks total CDS length of mono-exonic transcripts
    combined_cds_length.multi: {operator: gt, value: 150} # Checks total CDS length of multi-exonic transcripts
    exon_num.mono: {operator: eq, value: 1} # Checks number of exons in mono-exonic transcripts; this defines the .mono set
    exon_num.multi: {operator: gt, value: 1} # Checks number of exons in multi-exonic transcripts; this defines the .multi set
    max_intron_length: {operator: le, value: 1000000} # Checks max intron length
    min_intron_length: {operator: ge, value: 5} # Checks minimum intron length
    proportion_verified_introns_inlocus: {operator: gt, value: 0} # Checks proportion of introns in the "gene" (locus) that are in a given transcript
    proportion_verified_introns: {operator: gt, value: 0} # Checks proportion of introns in a transcript that were verified by external data
    is_complete: {operator: eq, value: true} # Checks if ORF has a start and end; could be removed to find potential non-stop decay targets
cds_requirements: # Requirements of the coding sequence; will be stripped of its ORF if not passed
  expression: [combined_cds_length]
  parameters:
    combined_cds_length: {operator: ge, value: 0}
as_requirements: # Minimum requirements for a transcript to be considered an alternative splicing event (so transcript other than the major isoform)
  expression: [cdna_length and three_utr_length and five_utr_length and utr_length and three_utr_num and five_utr_num and suspicious_splicing]
  parameters:
    cdna_length: {operator: ge, value: 300} # Make sure it is at least 300 nt long
    utr_length: {operator: le, value: 3500} # Make sure its UTR is <= 3500 nt long
    five_utr_length: {operator: le, value: 3500} # Make sure its 5'UTR <= 3500 nt long
    three_utr_length: {operator: le, value: 3500} # Make sure its 3'UTR <= 3500 nt long
    suspicious_splicing: {operator: ne, value: true} # Weird strandedness problems where a transcript has an intron on both strands
    max_intron_length: {operator: le, value: 200000} # Intron must be <= 200,000 nt long
    three_utr_num: {operator: lt, value: 3} # Number of "segments" (pretty much exons or partial exons) that make up 3' UTR 
    five_utr_num: {operator: lt, value: 4} # Number of "segments" (pretty much exons or partial exons) that make up 5' UTR
not_fragmentary: # Bit unclear, but checks to see if a transcript is a "fragment" of a real transcript, or something like that. If primary transcript in a loci is a fragment, entire locus is purged
 expression: [((exon_num.multi and (cdna_length.multi or combined_cds_length.multi)), or, (exon_num.mono and combined_cds_length.mono))]
 parameters:
   is_complete: {operator: eq, value: true} # ORF has start and end; could remove this to find non-stop decay targets
   exon_num.multi: {operator: gt, value: 1} # Multi-exon transcript defined
   cdna_length.multi: {operator: ge, value: 400} # multi-exon transcript is >= 400 nt
   combined_cds_length.multi: {operator: gt, value: 200} # CDS of multi-exon transcript is >= 200 nt
   exon_num.mono: {operator: eq, value: 1} # Single-exon transcript defined
   combined_cds_length.mono: {operator: gt, value: 600} # CDS of single-exon transcript is >= 600 nt
scoring:
  blast_score: {rescaling: max} # One point added to transcripts with highest blast score
  cdna_length: {rescaling: max} # One point added to longest transcript
  cds_not_maximal: {rescaling: min} # one point added to transcript with smallest secondary ORF
  cds_not_maximal_fraction: {rescaling: min} # One point added to transcript with smallest fraction of CDS taken up by non-primary ORFs
  exon_num: { # Transcript with most amount of exons is given one point
    rescaling: max,
    filter: { # If transcript has < 3 exons, don't consider for scoring
    operator: ge,
    value: 3}
  } 
  five_utr_length: # Transcript with 5'UTR length closest to 400 nt is best
    filter: {operator: le, value: 3500} # score of 0 for any transcript with 5'UTR <= 3500
    rescaling: target
    value: 400
  five_utr_num: # Transcript with 2 exon/exon fragments in 5'UTR is best
    filter: {operator: lt, value: 4} # If transcript has >= 4 exon/exon fragments in 5'UTR, give is 0 score for this metric
    rescaling: target
    value: 2
  end_distance_from_junction: # Transcript with shortest distance between last exon-exon junction and stop codon
    filter: {operator: lt, value: 55}
    rescaling: min
  highest_cds_exon_number: {rescaling: max} # Transcript with most CDS segments (I guess exons, but maybe not) gets a point
  intron_fraction: {rescaling: max} # Transcript containing the highest fraction of introns within the loci gets a point
  is_complete: {rescaling: target, value: true} # ORF has start and stop
  number_internal_orfs: {rescaling: target, value: 1} # Transcript with closest to 1 ORF wins
  non_verified_introns_num: {rescaling: min} # Transcript with minimum number of introns not validated with external data
  proportion_verified_introns_inlocus: {rescaling: max} # One point for max fraction of verified introns within the locus that are contained within the transcript
  retained_fraction: {rescaling: min} # One point for minimum fraction of transcript that is a retained intron
  retained_intron_num: {rescaling: min} # One point for minimum number of retained introns
  selected_cds_fraction: {rescaling: target, value: 0.7} # Closest to 70% of main CDS is transcript length wins
  selected_cds_intron_fraction: {rescaling: max} # Of all the CDS introns for a locus, give a point to transcript with highest fraction of such introns
  selected_cds_length: {rescaling: max} # Maximize length of CDS within the transcript
  selected_cds_num: {rescaling: max} # Maximize number of CDS exons
  three_utr_length: # Closest to 300 nt 3'UTR length wins
    filter: {operator: le, value: 3500} # 0 points if 3'UTR >= 3500
    rescaling: target
    value: 800
  three_utr_num: # Closest to 1 3'UTR segment wins
    filter: {operator: lt, value: 3} # More than 3 3'UTR segments gets 0 points
    rescaling: target
    value: 1
  combined_cds_locus_fraction: {rescaling: max} # Maximize fraction of total CDS bases within the transcript
  ### THINGS I AM A BIT UNSURE ABOUT
  # Mentions UTR fragments and CDS fragments a lot. Not totally sure what these are.
  # I am starting to think this is when there are multiple CDSs, and so the 
  # UTR and CDS are broken into several pieces. 